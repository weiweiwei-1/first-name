<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd
                        http://www.springframework.org/schema/mvc
                        http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
                        http://www.springframework.org/schema/tx
                        http://www.springframework.org/schema/tx/spring-tx.xsd
                        http://www.springframework.org/schema/aop
                        http://www.springframework.org/schema/aop/spring-aop.xsd">

<!--下面的配置是为了使系统能识别注解，并注入bean容器中，有了这个注解，可以不用annotation-config
注意，每次配置完了一个配置文件，每一步都需要进行测试，防止后面错误出现不好找
-->
    <context:annotation-config></context:annotation-config>
    <context:component-scan base-package="Informal.mybatis">
        <!--取消对配置配置的注解扫描，下面的语句是取消对@Controller注解的扫描-->
        <!--<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"></context:exclude-filter>-->
    </context:component-scan>
    <!--基于@Service的注解，使得在Service类上可以使用@Transactional注解-->

    <context:property-placeholder location="classpath:properties/db.properties"></context:property-placeholder>
    <!--用annotation-config，就是为了让系统能识别注解@Resource、@ PostConstruct、@ PreDestroy.
    @PersistenceContext.@Required.@Autowired,由于不能识别component，service，controller，所以有这些注解时
    ，annotation-config将会无效-->

    <!--配置数据源，并设置数据源的属性等-->
<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
    <!--<property name="driver" value="com.mysql.jdbc.Driver"></property>-->
    <!--<property name="url" value="jdbc:mysql://localhost:3306/world?characterEncoding=utf-8"></property>-->
    <!--<property name="username" value="root"></property>-->
    <!--<property name="password" value="960529"></property>-->
    <property name="driverClassName" value="${jdbc.driver}"></property>
    <property name="url" value="${jdbc.url}"></property>
    <property name="username" value="${jdbc.username}"></property>
    <property name="password" value="${jdbc.password}"></property>
    <!-- 配置初始化大小、最小、最大 -->
    <property name="initialSize" value="5" />
    <property name="minIdle" value="10" />
    <property name="maxActive" value="20" />
    <!-- 配置获取连接等待超时的时间 -->
    <property name="maxWait" value="60000" />
    <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
    <property name="timeBetweenEvictionRunsMillis" value="60000" />
    <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
    <property name="minEvictableIdleTimeMillis" value="300000" />
    <!-- 连接泄漏处理。Druid提供了RemoveAbandanded相关配置，用来关闭长时间不使用的连接（例如忘记关闭连接）。 -->
    <property name="removeAbandoned" value="true" />
    <!-- 1800秒，也就是30分钟 -->
    <property name="removeAbandonedTimeout" value="1800" />
    <!-- 关闭abanded连接时输出错误日志 -->
    <property name="logAbandoned" value="true" />
</bean>

    <!--会话工程配置，跟sqlmap的配置功能相似-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean" >
        <property name="dataSource" ref="dataSource"></property>
        <property name="mapperLocations" value="classpath:Informal/mybatis/Mapper/*.xml"></property>
        <property name="configLocation" value="classpath:Informal/mybatis/SqlMapconfig.xml"></property>
    </bean>

    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory"></constructor-arg>
    </bean>


    <!--mapper接口的扫描，包含包和beanname,一旦被扫描，说明接口类已经注入到了bean容器中，
       因此类上面就可以不加注解标志了,如果没有basePackage-->
    <bean id="mapperScannerConfigure" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="Informal.mybatis.Dao"></property>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>

    <!--对mybatis操作数据库事务控制,spring使用jdbc的事务控制类-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--<property name="dataSource" ref="dataSource"></property>-->
        <constructor-arg ref="dataSource"></constructor-arg>
    </bean>
    <tx:annotation-driven transaction-manager="transactionManager"></tx:annotation-driven>
    <!--<import resource="SpringMvc.xml"></import>-->
</beans>